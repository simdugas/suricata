# -*- python -*-
# ex: set filetype=python:

import os

from buildbot.plugins import *

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c['workers'] = [worker.Worker("buildslave", 'Suridocker')]

if 'BUILDBOT_MQ_URL' in os.environ:
    c['mq'] = {
        'type' : 'wamp',
        'router_url': os.environ['BUILDBOT_MQ_URL'],
        'realm': os.environ.get('BUILDBOT_MQ_REALM', 'buildbot').decode('utf-8'),
        'debug' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_websockets' : 'BUILDBOT_MQ_DEBUG' in os.environ,
        'debug_lowlevel' : 'BUILDBOT_MQ_DEBUG' in os.environ,
    }
# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

c['change_source'] = []

# c['change_source'].append(changes.GitPoller(
#         'git://github.com/buildbot/pyflakes.git',
#         workdir='gitpoller-workdir', branch='master',
#         pollinterval=300, project='suricata'))

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.

c['schedulers'] = []
# c['schedulers'].append(schedulers.SingleBranchScheduler(
#                             name="master",
#                             change_filter=util.ChangeFilter(branch='master'),
#                             treeStableTimer=None,
#                             builderNames=["features","profiling","clang"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which workers can execute them.  Note that any particular build will
# only take place on one worker.

def SuriBuildFactory(repo='/data/oisf/'):
    factory = util.BuildFactory()
    factory.addStep(steps.Git(repourl=repo, mode='full', method='copy'))
    factory.addStep(steps.ShellCommand(command=["rm", "-rf", "libhtp"]))
    factory.addStep(steps.ShellCommand(command=["git", "clone", "-b", "0.5.x", "/data/oisf/libhtp/.git/", "libhtp"]))
    return factory


factory = SuriBuildFactory()
# run the tests (note that this will require that 'trial' is installed)
factory.addStep(steps.ShellCommand(command=["./autogen.sh"]))
factory.addStep(steps.ShellCommand(command=["./configure"]))
factory.addStep(steps.ShellCommand(command=["make"]))
factory.addStep(steps.ShellCommand(command=["make", "clean"]))
#factory.addStep(steps.ShellCommand(command=["make", "distcheck"]))

factory_devel = SuriBuildFactory()
# run the tests (note that this will require that 'trial' is installed)
factory_devel.addStep(steps.ShellCommand(command=["./autogen.sh"]))
factory_devel.addStep(steps.ShellCommand(command=["./configure","--enable-debug","--enable-unittests"]))
factory_devel.addStep(steps.ShellCommand(command=["make"]))
factory_devel.addStep(steps.ShellCommand(command=["make", "clean"]))
#factory_devel.addStep(steps.ShellCommand(command=["make", "distcheck"], env={'DISTCHECK_CONFIGURE_FLAGS': "--enable-debug --enable-unittests"}))

factory_profiling = SuriBuildFactory()
# run the tests (note that this will require that 'trial' is installed)
factory_profiling.addStep(steps.ShellCommand(command=["./autogen.sh"]))
factory_profiling.addStep(steps.ShellCommand(command=["./configure","--enable-debug","--enable-profiling","--enable-unittests"]))
factory_profiling.addStep(steps.ShellCommand(command=["make"]))
factory_profiling.addStep(steps.ShellCommand(command=["make", "clean"]))
#factory_profiling.addStep(steps.ShellCommand(command=["make", "distcheck"],env={'DISTCHECK_CONFIGURE_FLAGS': "--enable-debug --enable-profiling --enable-unittests"}))

factory_clang = SuriBuildFactory()
# run the tests (note that this will require that 'trial' is installed)
factory_clang.addStep(steps.ShellCommand(command=["./autogen.sh"]))
#factory_clang.addStep(steps.ShellCommand(command=["./configure","--enable-debug","--enable-unittests","CC=clang","CFLAGS=-fsanitize=address"]))
factory_clang.addStep(steps.ShellCommand(command=["./configure","--enable-debug","--enable-unittests","CC=clang","ac_cv_func_malloc_0_nonnull=yes","ac_cv_func_realloc_0_nonnull=yes"]))
factory_clang.addStep(steps.ShellCommand(command=["make"]))
factory_clang.addStep(steps.ShellCommand(command=["make", "clean"]))

factory_clang_32 = SuriBuildFactory()
# run the tests (note that this will require that 'trial' is installed)
factory_clang_32.addStep(steps.ShellCommand(command=["./autogen.sh"]))
factory_clang_32.addStep(steps.ShellCommand(command=["./configure","--enable-debug","--enable-unittests","CC=clang","CFLAGS=-fsanitize=address","ac_cv_func_malloc_0_nonnull=yes","ac_cv_func_realloc_0_nonnull=yes"]))
factory_clang_32.addStep(steps.ShellCommand(command=["make"]))
factory_clang_32.addStep(steps.ShellCommand(command=["make", "clean"]))

factory_features = SuriBuildFactory()
# run the tests (note that this will require that 'trial' is installed)
factory_features.addStep(steps.ShellCommand(command=["./autogen.sh"]))
factory_features.addStep(steps.ShellCommand(command=["./configure","--enable-debug","--enable-unittests","--enable-nfqueue","--enable-nflog", "--enable-lua", "--enable-prelude"]))
factory_features.addStep(steps.ShellCommand(command=["make"]))
factory_features.addStep(steps.ShellCommand(command=["make", "clean"]))
import psutil
factory_features.addStep(steps.ShellCommand(command=["make", "distcheck"],env={'DISTCHECK_CONFIGURE_FLAGS': "--enable-debug --enable-unittests --enable-nfqueue --enable-nflog --enable-lua --enable-prelude", "CONCURRENCY_LEVEL": str(psutil.cpu_count())}))

import os
PCAP_PATH='/data/oisf/qa/docker/pcaps/'
(_, _, pcaps_list) = next(os.walk(PCAP_PATH), (None, None, ""))
pcaps_list = [ os.path.join(PCAP_PATH, pcap) for pcap in pcaps_list if pcap.endswith(".pcap") ]

factory_stress_pcap = SuriBuildFactory()
# run the tests (note that this will require that 'trial' is installed)
factory_stress_pcap.addStep(steps.ShellCommand(command=["./autogen.sh"]))
factory_stress_pcap.addStep(steps.ShellCommand(command=["./configure","--enable-debug-validation"],env={"CFLAGS" : "-fsanitize=address -fno-omit-frame-pointer"}))
factory_stress_pcap.addStep(steps.ShellCommand(command=["make"]))
factory_stress_pcap.addStep(steps.ShellCommand(command=["sudo", "make","install"]))
factory_stress_pcap.addStep(steps.ShellCommand(command=["sudo", "rm", "-f", "/usr/local/etc/suricata/suricata.yaml"]))
factory_stress_pcap.addStep(steps.ShellCommand(command=["sudo", "make","install-conf"]))
factory_stress_pcap.addStep(steps.ShellCommand(command=["make","clean"]))
factory_stress_pcap.addStep(steps.ShellCommand(command=["sudo", "ldconfig"]))
for pfile in pcaps_list:
    factory_stress_pcap.addStep(steps.ShellCommand(command=["sudo", "/usr/local/bin/suricata","-r",pfile,"--init-errors-fatal","-S","/data/oisf/rules/http-events.rules"]))
factory_stress_pcap.addStep(steps.ShellCommand(command=["sudo", "rm", "-rf", "/usr/local/var/log/suricata/"]))

def SuriBuilderConfig(*args, **kwargs):
    if not 'tags' in kwargs:
        kwargs['tags']=['default']
    return util.BuilderConfig(*args, **kwargs)

c['builders'] = []

c['builders'].append(
    SuriBuilderConfig(name="gcc",
      workernames=["buildslave"],
      factory=factory))

# c['schedulers'].append(SingleBranchScheduler(
#                             name="build",
#                             change_filter=filter.ChangeFilter(branch='master'),
#                             treeStableTimer=None,
#                             builderNames=["gcc"]))

c['builders'].append(
    SuriBuilderConfig(name="debug",
      workernames=["buildslave"],
      factory=factory_devel))

# c['schedulers'].append(SingleBranchScheduler(
#                             name="debug",
#                             change_filter=filter.ChangeFilter(branch='master'),
#                             treeStableTimer=None,
#                             builderNames=["debug"]))

c['builders'].append(
    SuriBuilderConfig(name="profiling",
      workernames=["buildslave"],
      factory=factory_profiling))
c['builders'].append(
    SuriBuilderConfig(name="clang",
      workernames=["buildslave"],
      factory=factory_clang_32))
c['builders'].append(
    SuriBuilderConfig(name="features",
      workernames=["buildslave"],
      factory=factory_features))
c['builders'].append(
    SuriBuilderConfig(name="pcaps",
      workernames=["buildslave"],
      factory=factory_stress_pcap))

build_lock = util.WorkerLock("worker_builds", maxCount = 1)

c['schedulers'].append(schedulers.ForceScheduler(name="force", builderNames = [ builder.getConfigDict()['name'] for builder in c['builders'] ]))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# like IRC bots.

# c['status'] = []

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "Suricata"
c['titleURL'] = "https://redmine.openinfosecfoundation.org/projects/suricata"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "http://localhost:8010/")

# minimalistic config to activate new web UI
c['www'] = dict(port=os.environ.get("BUILDBOT_WEB_PORT", 8010),
                plugins=dict(waterfall_view={}))

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://").format(**os.environ),
}

c['buildbotNetUsageData'] = 'full'